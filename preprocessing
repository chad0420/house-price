train = pd.read_csv(r"C:\Users\user\house price\train.csv")
test = pd.read_csv(r"C:\Users\user\house price\test.csv")
train.shape, test.shape

train.drop(['Id'], axis=1, inplace=True)
test.drop(['Id'], axis=1, inplace=True)

train['SalePrice'].hist(bins=40)

#使用log1p來消除偏差
train = train[train.GrLivArea < 4500]
train.reset_index(drop=True, inplace=True)
train["SalePrice"] = np.log1p(train["SalePrice"])
y = train["SalePrice"].reset_index(drop=True)

train['SalePrice'].hist(bins = 40)

train_features = train.drop(['SalePrice'],axis=1)
test_features = test
#垂直加入test features
features = pd.concat([train_features, test_features]).reset_index(drop=True)

#這些數字並非真的有意義，需要轉換成字符才不會被model考慮進去
features['MSSubClass'] = features['MSSubClass'].apply(str)
features['YrSold'] = features['YrSold'].astype(str)
features['MoSold'] = features['MoSold'].astype(str)   #時間: astype(str) 方法可以直接将这些列转换为字符串类型。

#填滿空值
features['Functional'] = features['Functional'].fillna('Typ') 
features['Electrical'] = features['Electrical'].fillna("SBrkr") 
features['KitchenQual'] = features['KitchenQual'].fillna("TA") 
features["PoolQC"] = features["PoolQC"].fillna("None")

#the most frequent value in these columns .
features['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0]) 
features['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])
features['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])

for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):
    features[col] = features[col].fillna(0)

for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:
    features[col] = features[col].fillna('None')

for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):
    features[col] = features[col].fillna('None')

features['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))

#Fill the remaining columns as None
objects = []
for i in features.columns:
    if features[i].dtype == object:
        objects.append(i)
features.update(features[objects].fillna('None'))
print(objects)

#For missing values in numerical cols , we fillNa with 0.
# We are still filling up missing values 
features['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))

numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numerics = []
for i in features.columns:
    if features[i].dtype in numeric_dtypes:
        numerics.append(i)
features.update(features[numerics].fillna(0))
numerics[1:10]

numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32','float64']
numerics2 = []
for i in features.columns:
    if features[i].dtype in numeric_dtypes:
        numerics2.append(i)
skew_features = features[numerics2].apply(lambda x :skew(x)).sort_values(ascending=False)

high_skew = skew_features[skew_features>0.5]
skew_index = high_skew.index

pt = PowerTransformer(method='yeo-johnson')

for i in skew_index:
    features[[i]] = pt.fit_transform(features[[i]])
